predicted_layer = meta_layer$predict(new_layer = new_meta_data$getLayer(),
ind_subset = ind_subset)
# Updating the predicted meta layer
predicted_study$add2HashTable(key = meta_layer_key,
value = predicted_layer,
.class = "Predict")
# Resume predictions
key_class_study = predicted_study$getKeyClass()
predicted_values = NULL
for (k in key_class_study[ , "key"]) {
# FIXME: Maybe define a class Prediction instead of
#        using Hashtable?
pred_layer = predicted_study$getFromHashTable(key = k)
pred = pred_layer$getFromHashTable(key = "predict")
predicted_values = data.frame(rbind(predicted_values,
pred))
}
# Will transform meta data.frame into wide format
predicted_values_wide = reshape(predicted_values,
idvar = colnames(predicted_values)[2L],
timevar = colnames(predicted_values)[1L],
direction = "wide")
colname_vector = gsub(pattern = "Prediction.",
replacement = "",
x = names(predicted_values_wide))
names(predicted_values_wide) = colname_vector
target_df = self$getTargetValues()
predicted_values_wide = merge(x = target_df,
y = predicted_values_wide,
by = colnames(target_df)[1L],
all.y = TRUE)
return(list(predicted_study = predicted_study,
predicted_values = predicted_values_wide))
},
#' @description
#' Gather target values from all layer.
#'
#' @return
#' A \code{data.frame} containing individuals IDs and corresponding target values.
#' @export
#'
getTargetValues = function() {
layers = self$getKeyClass()
# This code accesses each layer (except MetaLayer) level
# and get the target variable
layers = layers[layers$class %in% "Layer", ]
target_data = NULL
train_data = NULL
for (k in layers$key) {
layer = self$getFromHashTable(key = k)
target_data = as.data.frame(rbind(target_data,
layer$getTargetValues()))
train_data = layer$getTrainData()
}
target_data = target_data[!duplicated(target_data[ , train_data$getIndCol()]), ]
return(target_data)
},
#' @description
#' Getter of the meta layer.
#'
#' @return
#' Object from class [MetaLayer]
#' @export
#'
getMetaLayer = function () {
layers = self$getKeyClass()
meta_layer_key = layers[layers$class == "MetaLayer" , "key"]
meta_layer = self$getFromHashTable(key = meta_layer_key)
return(meta_layer)
}
),
# TODO: Define a deep_clone function for this class.
cloneable = FALSE
)
devtools::check()
library(fuseMLR)
data("entities")
# Study
study <- Study$new(id = "study")
# Layers
geneexpr <- Layer$new(id = "geneexpr", study = study)
proteinexpr <- Layer$new(id = "proteinexpr", study = study)
methylation <- Layer$new(id = "methylation", study = study)
meta_layer <- MetaLayer$new(id = "meta_layer", study = study)
# Training data
train_data_geneexpr <- TrainData$new(id = "geneexpr",
layer = geneexpr,
ind_col = "IDS",
data_frame = entities$training$geneexpr,
target = "disease")
train_data_proteinexpr <- TrainData$new(id = "proteinexpr",
layer = proteinexpr,
ind_col = "IDS",
data_frame = entities$training$proteinexpr,
target = "disease")
train_data_methylation <- TrainData$new(id = "methylation",
layer = methylation,
ind_col = "IDS",
data_frame = entities$training$methylation,
target = "disease")
# Learner parameters. Same parameter values at each layer.
same_param <- ParamLearner$new(id = "ParamRanger",
param_list = list(probability = TRUE,
mtry = 1),
hyperparam_list = list(num.trees = 1000))
# Learner
lrner_geneexpr <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = geneexpr)
lrner_proteinexpr <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = proteinexpr)
lrner_methylation <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = methylation)
lrner_meta <- Lrner$new(id = "weighted",
lrn_fct = "weightedMeanLearner",
param = ParamLearner$new(id = "ParamWeighted",
param_list = list(),
hyperparam_list = list()),
layer = meta_layer)
# Training using the caret corssvalidation with default parameters.
# Train the all study
study$createMetaTrainData(resampling_method = "caret::createFolds",
resampling_arg = list(y = study$getTargetValues()$disease,
k = 2))
study$getTargetValues()
trained_study <- study$train(resampling_method = "caret::createFolds",
resampling_arg = list(y = study$getTargetValues()$disease,
k = 2))
study$predict(new_study = study)
devtools::check()
library(fuseMLR)
data("entities")
# Study
study <- Study$new(id = "study")
# Layers
geneexpr <- Layer$new(id = "geneexpr", study = study)
proteinexpr <- Layer$new(id = "proteinexpr", study = study)
methylation <- Layer$new(id = "methylation", study = study)
meta_layer <- MetaLayer$new(id = "meta_layer", study = study)
# Training data
train_data_geneexpr <- TrainData$new(id = "geneexpr",
layer = geneexpr,
ind_col = "IDS",
data_frame = entities$training$geneexpr,
target = "disease")
train_data_proteinexpr <- TrainData$new(id = "proteinexpr",
layer = proteinexpr,
ind_col = "IDS",
data_frame = entities$training$proteinexpr,
target = "disease")
train_data_methylation <- TrainData$new(id = "methylation",
layer = methylation,
ind_col = "IDS",
data_frame = entities$training$methylation,
target = "disease")
# Learner parameters. Same parameter values at each layer.
same_param <- ParamLearner$new(id = "ParamRanger",
param_list = list(probability = TRUE,
mtry = 1),
hyperparam_list = list(num.trees = 1000))
# Learner
lrner_geneexpr <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = geneexpr)
lrner_proteinexpr <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = proteinexpr)
lrner_methylation <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = methylation)
lrner_meta <- Lrner$new(id = "weighted",
lrn_fct = "weightedMeanLearner",
param = ParamLearner$new(id = "ParamWeighted",
param_list = list(),
hyperparam_list = list()),
layer = meta_layer)
# Training using the caret corssvalidation with default parameters.
# Train the all study
study$createMetaTrainData(resampling_method = "caret::createFolds",
resampling_arg = list(y = study$getTargetValues()$disease,
k = 2))
study$getTargetValues()
trained_study <- study$train(resampling_method = "caret::createFolds",
resampling_arg = list(y = study$getTargetValues()$disease,
k = 2))
study$predict(new_study = study)
tmp <- study$predict(new_study = study)
tmp$predicted_study$removeFromHashTable("meta_layer")
tmp$predicted_study$removeFromHashTable("meta_layer")
d
tmp$predicted_study$removeFromHashTable("meta_layer")
data("entities")
# Study
study <- Study$new(id = "study")
# Layers
geneexpr <- Layer$new(id = "geneexpr", study = study)
proteinexpr <- Layer$new(id = "proteinexpr", study = study)
methylation <- Layer$new(id = "methylation", study = study)
meta_layer <- MetaLayer$new(id = "meta_layer", study = study)
# Training data
train_data_geneexpr <- TrainData$new(id = "geneexpr",
layer = geneexpr,
ind_col = "IDS",
data_frame = entities$training$geneexpr,
target = "disease")
train_data_proteinexpr <- TrainData$new(id = "proteinexpr",
layer = proteinexpr,
ind_col = "IDS",
data_frame = entities$training$proteinexpr,
target = "disease")
train_data_methylation <- TrainData$new(id = "methylation",
layer = methylation,
ind_col = "IDS",
data_frame = entities$training$methylation,
target = "disease")
# Learner parameters. Same parameter values at each layer.
same_param <- ParamLearner$new(id = "ParamRanger",
param_list = list(probability = TRUE,
mtry = 1),
hyperparam_list = list(num.trees = 1000))
# Learner
lrner_geneexpr <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = geneexpr)
lrner_proteinexpr <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = proteinexpr)
lrner_methylation <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = methylation)
lrner_meta <- Lrner$new(id = "weighted",
lrn_fct = "weightedMeanLearner",
param = ParamLearner$new(id = "ParamWeighted",
param_list = list(),
hyperparam_list = list()),
layer = meta_layer)
# Training using the caret corssvalidation with default parameters.
# Train the all study
study$createMetaTrainData(resampling_method = "caret::createFolds",
resampling_arg = list(y = study$getTargetValues()$disease,
k = 2))
study$getTargetValues()
trained_study <- study$train(resampling_method = "caret::createFolds",
resampling_arg = list(y = study$getTargetValues()$disease,
k = 2))
study$predict(new_study = study)
tmp <- study$predict(new_study = study)
tmp$predicted_study$getFromHashTable("meta_layer")
tmp$predicted_study$getFromHashTable("meta_layer")$getFromHashTable("predict")
tmp$predicted_study$getFromHashTable("geneexpr")$getFromHashTable("predict")
tmp$predicted_study$getFromHashTable("proteinexpr")$getFromHashTable("predict")
tmp$predicted_study$getFromHashTable("methylation")$getFromHashTable("predict")
devtools::check()
data("entities")
# Study
study <- Study$new(id = "study")
# Layers
geneexpr <- Layer$new(id = "geneexpr", study = study)
proteinexpr <- Layer$new(id = "proteinexpr", study = study)
methylation <- Layer$new(id = "methylation", study = study)
meta_layer <- MetaLayer$new(id = "meta_layer", study = study)
# Training data
train_data_geneexpr <- TrainData$new(id = "geneexpr",
layer = geneexpr,
ind_col = "IDS",
data_frame = entities$training$geneexpr,
target = "disease")
train_data_proteinexpr <- TrainData$new(id = "proteinexpr",
layer = proteinexpr,
ind_col = "IDS",
data_frame = entities$training$proteinexpr,
target = "disease")
train_data_methylation <- TrainData$new(id = "methylation",
layer = methylation,
ind_col = "IDS",
data_frame = entities$training$methylation,
target = "disease")
# Learner parameters. Same parameter values at each layer.
same_param <- ParamLearner$new(id = "ParamRanger",
param_list = list(probability = TRUE,
mtry = 1),
hyperparam_list = list(num.trees = 1000))
# Learner
lrner_geneexpr <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = geneexpr)
lrner_proteinexpr <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = proteinexpr)
lrner_methylation <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = methylation)
lrner_meta <- Lrner$new(id = "weighted",
lrn_fct = "weightedMeanLearner",
param = ParamLearner$new(id = "ParamWeighted",
param_list = list(),
hyperparam_list = list()),
layer = meta_layer)
# Training using the caret corssvalidation with default parameters.
# Train the all study
study$createMetaTrainData(resampling_method = "caret::createFolds",
resampling_arg = list(y = study$getTargetValues()$disease,
k = 2))
study$getTargetValues()
trained_study <- study$train(resampling_method = "caret::createFolds",
resampling_arg = list(y = study$getTargetValues()$disease,
k = 2))
study$predict(new_study = study)
data("entities")
# Study
study <- Study$new(id = "study")
# Layers
geneexpr <- Layer$new(id = "geneexpr", study = study)
proteinexpr <- Layer$new(id = "proteinexpr", study = study)
methylation <- Layer$new(id = "methylation", study = study)
meta_layer <- MetaLayer$new(id = "meta_layer", study = study)
# Training data
train_data_geneexpr <- TrainData$new(id = "geneexpr",
layer = geneexpr,
ind_col = "IDS",
data_frame = entities$training$geneexpr,
target = "disease")
train_data_proteinexpr <- TrainData$new(id = "proteinexpr",
layer = proteinexpr,
ind_col = "IDS",
data_frame = entities$training$proteinexpr,
target = "disease")
train_data_methylation <- TrainData$new(id = "methylation",
layer = methylation,
ind_col = "IDS",
data_frame = entities$training$methylation,
target = "disease")
# Learner parameters. Same parameter values at each layer.
same_param <- ParamLearner$new(id = "ParamRanger",
param_list = list(probability = TRUE,
mtry = 1),
hyperparam_list = list(num.trees = 1000))
# Learner
lrner_geneexpr <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = geneexpr)
lrner_proteinexpr <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = proteinexpr)
lrner_methylation <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = methylation)
lrner_meta <- Lrner$new(id = "weighted",
lrn_fct = "weightedMeanLearner",
param = ParamLearner$new(id = "ParamWeighted",
param_list = list(),
hyperparam_list = list()),
layer = meta_layer)
# Training using the caret corssvalidation with default parameters.
# Train the all study
study$createMetaTrainData(resampling_method = "caret::createFolds",
resampling_arg = list(y = study$getTargetValues()$disease,
k = 2))
study$getTargetValues()
trained_study <- study$train(resampling_method = "caret::createFolds",
resampling_arg = list(y = study$getTargetValues()$disease,
k = 2))
study$predict(new_study = study)
# Create a new study
new_study <- Study$new(id = "new_study")
# A meta_layer is not reuired
new_geneexpr <- Layer$new(id = "geneexpr", study = new_study)
new_proteinexpr <- Layer$new(id = "proteinexpr", study = new_study)
new_methylation <- Layer$new(id = "methylation", study = new_study)
# NewData are required at each layers
new_data_geneexpr <- NewData$new(id = "geneexpr",
layer = geneexpr,
ind_col = "IDS",
data_frame = entities$testing$geneexpr,
target = "disease")
# NewData are required at each layers
new_data_geneexpr <- NewData$new(id = "geneexpr",
layer = geneexpr,
ind_col = "IDS",
data_frame = entities$testing$geneexpr)
new_data_proteinexpr <- NewData$new(id = "proteinexpr",
layer = proteinexpr,
ind_col = "IDS",
data_frame = entities$testing$proteinexpr)
new_data_methylation <- NewData$new(id = "methylation",
layer = methylation,
ind_col = "IDS",
data_frame = entities$testing$methylation)
study$predict(new_study = new_study)
data("entities")
# Study
study <- Study$new(id = "study")
# Layers
geneexpr <- Layer$new(id = "geneexpr", study = study)
proteinexpr <- Layer$new(id = "proteinexpr", study = study)
methylation <- Layer$new(id = "methylation", study = study)
meta_layer <- MetaLayer$new(id = "meta_layer", study = study)
# Training data
train_data_geneexpr <- TrainData$new(id = "geneexpr",
layer = geneexpr,
ind_col = "IDS",
data_frame = entities$training$geneexpr,
target = "disease")
train_data_proteinexpr <- TrainData$new(id = "proteinexpr",
layer = proteinexpr,
ind_col = "IDS",
data_frame = entities$training$proteinexpr,
target = "disease")
train_data_methylation <- TrainData$new(id = "methylation",
layer = methylation,
ind_col = "IDS",
data_frame = entities$training$methylation,
target = "disease")
# Learner parameters. Same parameter values at each layer.
same_param <- ParamLearner$new(id = "ParamRanger",
param_list = list(probability = TRUE,
mtry = 1),
hyperparam_list = list(num.trees = 1000))
# Learner
lrner_geneexpr <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = geneexpr)
lrner_proteinexpr <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = proteinexpr)
lrner_methylation <- Lrner$new(id = "ranger",
package = "ranger",
lrn_fct = "ranger",
param = same_param,
layer = methylation)
lrner_meta <- Lrner$new(id = "weighted",
lrn_fct = "weightedMeanLearner",
param = ParamLearner$new(id = "ParamWeighted",
param_list = list(),
hyperparam_list = list()),
layer = meta_layer)
# Training using the caret corssvalidation with default parameters.
# Train the all study
study$createMetaTrainData(resampling_method = "caret::createFolds",
resampling_arg = list(y = study$getTargetValues()$disease,
k = 2))
study$getTargetValues()
trained_study <- study$train(resampling_method = "caret::createFolds",
resampling_arg = list(y = study$getTargetValues()$disease,
k = 2))
# Create a new study
new_study <- Study$new(id = "new_study")
# A meta_layer is not reuired
new_geneexpr <- Layer$new(id = "geneexpr", study = new_study)
new_proteinexpr <- Layer$new(id = "proteinexpr", study = new_study)
new_methylation <- Layer$new(id = "methylation", study = new_study)
# NewData are required at each layers
new_data_geneexpr <- NewData$new(id = "geneexpr",
layer = new_geneexpr,
ind_col = "IDS",
data_frame = entities$testing$geneexpr)
new_data_proteinexpr <- NewData$new(id = "proteinexpr",
layer = new_proteinexpr,
ind_col = "IDS",
data_frame = entities$testing$proteinexpr)
new_data_methylation <- NewData$new(id = "methylation",
layer = new_methylation,
ind_col = "IDS",
data_frame = entities$testing$methylation)
study$predict(new_study = new_study)
geneexpr$predict(new_layer = new_geneexpr)
proteinexpr$predict(new_layer = new_proteinexpr)
methylation$predict(new_layer = new_methylation)
dim(entities$testing$proteinexpr)
study$predict(new_study = new_study)
ind_subset
study$predict(new_study = new_study)
devtools::check()
library(fuseMLR)
devtools::check()
rm(list = ls())
